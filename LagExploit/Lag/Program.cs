#region

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using LeagueSharp;
using LeagueSharp.Common;

#endregion

namespace Exploit_Framework
{
    internal class Program
    {
        public static Menu Config;
        public static List<GameObject> Wards = new List<GameObject>();
        private static readonly Spell Q = new Spell(SpellSlot.Q, 99999);
        private static readonly Spell W = new Spell(SpellSlot.W, 99999);
        private static readonly Spell E = new Spell(SpellSlot.E, 99999);

        private static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += delegate
            {
                var onGameLoad = new Thread(Game_OnGameLoad);
                onGameLoad.Start();
            };
        }

        private static void Game_OnGameLoad()
        {
            Config = new Menu("Exploit Framework", "Exploit", true);

            Config.AddSubMenu(new Menu("Exploits", "Exploits"));
            Config.SubMenu("Exploits")
                .AddItem(new MenuItem("LAG", "Lag exploit"))
                .SetValue(new KeyBind("H".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits")
                .AddItem(new MenuItem("LAG2", "Lag exploit"))
                .SetValue(new KeyBind("J".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits")
                .AddItem(new MenuItem("LAG3", "Lag exploit"))
                .SetValue(new KeyBind("K".ToCharArray()[0], KeyBindType.Toggle));

            Config.AddToMainMenu();
            Game.OnGameUpdate += game_Update;
        }

        private static void game_Update(EventArgs args)
        {
            if (Config.Item("LAG").GetValue<KeyBind>().Active)
            {
                foreach (
                    var minion in
                        ObjectManager.Get<Obj_AI_Base>()
                            .Where(
                                minion =>
                                    minion.IsEnemy &&
                                    minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    )
                {
                    Q.CastOnUnit(minion);
                }
            }

            if (Config.Item("LAG2").GetValue<KeyBind>().Active)
            {
                foreach (
                    var minion in
                        ObjectManager.Get<Obj_AI_Base>()
                            .Where(
                                minion =>
                                    minion.IsEnemy &&
                                    minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    )
                {
                    W.CastOnUnit(minion);
                }
            }

            if (Config.Item("LAG3").GetValue<KeyBind>().Active)
            {
                foreach (
                    var minion in
                        ObjectManager.Get<Obj_AI_Base>()
                            .Where(
                                minion =>
                                    minion.IsEnemy &&
                                    minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    )
                {
                    E.CastOnUnit(minion);
                }
            }
        }
    }
}